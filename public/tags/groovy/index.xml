<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>groovy on Mehameha</title>
    <link>/tags/groovy/</link>
    <description>Recent content in groovy on Mehameha</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 03 Jul 2019 15:13:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/groovy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Groovy 与 Java 的区别</title>
      <link>/post/groovy-deffence-java/</link>
      <pubDate>Wed, 03 Jul 2019 15:13:00 +0000</pubDate>
      
      <guid>/post/groovy-deffence-java/</guid>
      <description>在 Groovy 语言设计之初，就遵从了 Least Surprise 原则，可以让 Java 程序员更快适应 Groovy。 我们列出了 Java 和 Groovy 之间的所有主要区别。 默认导入 Groovy 默认情况下导入以下包和类，可以不用显式的以 import 语句来导入它们： java.io.* java.lang.* java.math.BigDecimal java.math.BigInteger java.net.* java.util.* groovy.lang.* groovy.util.* 多方法（Multi-methods） 在 Groovy 中，将在运行时选择将调用的方法，称为运行时调度</description>
    </item>
    
    <item>
      <title>Groovy Servlet 使用指南</title>
      <link>/post/groovy-servlet/</link>
      <pubDate>Fri, 28 Jun 2019 18:20:00 +0000</pubDate>
      
      <guid>/post/groovy-servlet/</guid>
      <description>我们可以在 Groovy 中写 Java Servlet，称为 Groovlet 或 GroovyServlet。它能自动编译 .groovy 源文件并转换为字节码。 Groovlet使用示例如下： if (!session) { session = request.getSession(true) } if (!session.counter) { session.counter = 1 } println &amp;#34;&amp;#34;&amp;#34; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Groovy Servlet&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt; Hello, ${request.remoteHost}: ${session.counter}! ${new Date()} &amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &amp;#34;&amp;#34;&amp;#34; session.counter = session.counter + 1 或者，使用 MarkupBuilder 执行相同的操作： if (!session) { session = request.getSession(true) } if (!session.counter) { session.counter = 1 } html.html { // html is implicitly bound</description>
    </item>
    
    <item>
      <title>Groovy 语法 - List</title>
      <link>/post/groovy-syntax-list/</link>
      <pubDate>Fri, 28 Jun 2019 18:15:00 +0000</pubDate>
      
      <guid>/post/groovy-syntax-list/</guid>
      <description>Groovy 用逗号分隔值，并用方括号括起来，用来表示列表（List）。Groovy 没有自己定义集合类，Groovy 列表本质是 JDK 的 java.util.List。List 默认的实现类是 java.util.ArrayList，你也可以自己指定其他实现类。 // 定义一个由逗号分隔的数字型列表，并用方括</description>
    </item>
    
    <item>
      <title>Groovy 语法 - 关键字</title>
      <link>/post/groovy-syntax-keywords/</link>
      <pubDate>Fri, 28 Jun 2019 17:49:00 +0000</pubDate>
      
      <guid>/post/groovy-syntax-keywords/</guid>
      <description>以下是 Groovy 语言的所有关键字： as assert break case catch class const continue def default do else enum extends false finally for goto if implements import in instanceof interface new null package return super switch this throw throws trait true try while 原文地址：http://groovy-lang.org/syntax.html</description>
    </item>
    
    <item>
      <title>Groovy 语法 - 标识符</title>
      <link>/post/groovy-syntax-identifiers/</link>
      <pubDate>Fri, 28 Jun 2019 17:49:00 +0000</pubDate>
      
      <guid>/post/groovy-syntax-identifiers/</guid>
      <description>普通标识符 标识符以字母、$ 或下划线开头，不能以数字开头。字符必须在以下范围之内： &amp;lsquo;a&amp;rsquo; ~ &amp;lsquo;z&amp;rsquo;（小写 ascii 字符） &amp;lsquo;A&amp;rsquo; ~ &amp;lsquo;Z&amp;rsquo;（大写 ascii 字符） &amp;lsquo;\u00C0&amp;rsquo; ~ &amp;lsquo;\u00D6&amp;rsquo; &amp;lsquo;\u00D8&amp;rsquo; ~ &amp;lsquo;\u00F6&amp;rsquo; &amp;lsquo;\u00F8&amp;rsquo; ~ &amp;lsquo;\u00FF&amp;rsquo; &amp;lsquo;\u0100&amp;rsquo; ~ &amp;lsquo;\uFFFE&amp;rsquo; 后续字符可以是字母或数字。 这是一些有效的标识符示例（这些是变量名）： def name def item3 def with_underscore</description>
    </item>
    
    <item>
      <title>Groovy 语法 - 注释</title>
      <link>/post/groovy-syntax-comment/</link>
      <pubDate>Fri, 28 Jun 2019 17:41:00 +0000</pubDate>
      
      <guid>/post/groovy-syntax-comment/</guid>
      <description>Groovy 的语法源自 Java 语法，但 Groovy 的特定构造对其进行了增强，并允许某些简化。 单行注释 单行注释以 // 开头，可以在行中的任何位置找到。// 直到行尾的字符被视为注释的一部分。 // a standalone single line comment println &amp;#34;hello&amp;#34; // a comment till the end of the line 多行注释 多行注释以 /* 开头，可以在行中的任何位置找到。/* 后面的字符将被视为注释的一部分，包</description>
    </item>
    
    <item>
      <title>Groovy 环境安装</title>
      <link>/post/groovy-install/</link>
      <pubDate>Fri, 28 Jun 2019 17:13:00 +0000</pubDate>
      
      <guid>/post/groovy-install/</guid>
      <description>以 Groovy 的二进制发行版，安装过程如下： 首先，下载 Groovy 的二进制发行版并将其解压缩到本地文件系统上的某个文件中； 将 GROOVY_HOME 环境变量设置为解压缩发行版文件的目录； 将 GROOVY_HOME/bin 添加到 PATH 环境变量中； 将 JAVA_HOME 环境变量指向你的 JDK。OS X 上是 /Library/Java/Home，其他 unix 环境通常是 /usr/java 。如果你已经装过 Ant</description>
    </item>
    
    <item>
      <title>Groovy 语法 - Boolean</title>
      <link>/post/groovy-syntax-boolean/</link>
      <pubDate>Fri, 28 Jun 2019 17:05:00 +0000</pubDate>
      
      <guid>/post/groovy-syntax-boolean/</guid>
      <description>Boolean 是一种特殊的数据类型，用于表示真值：true 和 false。将此数据类型用于跟踪真/假条件的简单标志。 布尔值可以存储在变量中，分配到字段中，就像任何其他数据类型一样： def myBooleanVariable = true boolean untypedBooleanVar = false booleanField = true true 和 false是唯一的两个原始布尔值。但是更复杂的布尔表达式可以使用逻辑运算符表示。 此外，G</description>
    </item>
    
    <item>
      <title>Groovy 语法 - Map</title>
      <link>/post/groovy-syntax-map/</link>
      <pubDate>Fri, 28 Jun 2019 17:00:00 +0000</pubDate>
      
      <guid>/post/groovy-syntax-map/</guid>
      <description>Map 有时在其他语言中称为字典或关联数组，Groovy 也有 Map 功能。 Map 将键与值相关联，用冒号分隔键和值，使用逗号分隔每个键/值对，以及用方括号括起的整个键和值。 // 我们定义了一个颜色名称的 map，与它们的十六进制编码的 html 色值相映射 def colors = [red: &amp;#39;#FF0000&amp;#39;, green: &amp;#39;#00FF00&amp;#39;, blue: &amp;#39;#0000FF&amp;#39;] // 我们使用下标符号来检查与 red 键相关联的内</description>
    </item>
    
    <item>
      <title>Groovy 语法 - 数组</title>
      <link>/post/groovy-syntax-arrays/</link>
      <pubDate>Fri, 28 Jun 2019 11:27:00 +0000</pubDate>
      
      <guid>/post/groovy-syntax-arrays/</guid>
      <description>Groovy 复用了列表的方括号作为数组的符号，但是为了制作这样的文字数组，你需要通过强制或类型声明来明确地定义数组的类型。 // 使用显式变量类型声明定义字符串数组 String[] arrStr = [&amp;#39;Ananas&amp;#39;, &amp;#39;Banana&amp;#39;, &amp;#39;Kiwi&amp;#39;] // 断言我们创建了一个字符串数组 assert arrStr instanceof String[] assert !(arrStr instanceof List) // 使用 as 运算符创建一个 int 数组 def numArr = [1, 2, 3] as int[] // 断言我们创建了一个原始 int 数组</description>
    </item>
    
    <item>
      <title>Groovy 程序结构</title>
      <link>/post/groovy-program-structure/</link>
      <pubDate>Thu, 27 Jun 2019 19:15:00 +0000</pubDate>
      
      <guid>/post/groovy-program-structure/</guid>
      <description>本章主要讲 Groovy 编程语言的程序结构。 包（package） 包名称与 Java 中的角色完全相同。它们允许我们在没有任何冲突的情况下分离代码库。Groovy 类必须在类定义之前指定它们的包，否则假定使用默认包。 包的定义与 Java 非常相似： // defining a package named com.yoursite package com.yoursite 要在 com.yoursite.com 包中引用某个类 Foo，您需要使用全路径com.</description>
    </item>
    
  </channel>
</rss>