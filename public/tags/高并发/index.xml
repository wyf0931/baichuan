<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高并发 on Mehameha</title>
    <link>/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 高并发 on Mehameha</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 26 May 2020 20:32:26 +0800</lastBuildDate>
    
	<atom:link href="/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>高并发系统中的尾延迟</title>
      <link>/post/tail-latency/</link>
      <pubDate>Tue, 26 May 2020 20:32:26 +0800</pubDate>
      
      <guid>/post/tail-latency/</guid>
      <description>&lt;p&gt;尾延迟（Tail Latency）是指系统中那些总会存在的少量延迟高于均值的响应。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 高级并发对象之 Lock 对象</title>
      <link>/post/java-concurrent-lock/</link>
      <pubDate>Mon, 01 Jul 2019 15:25:00 +0000</pubDate>
      
      <guid>/post/java-concurrent-lock/</guid>
      <description>本文主要介绍 Java 并发控制中常用的 Lock 对象。 同步代码依赖于一种简单的可重入锁。这种锁很容易使用，但有很多限制。 java.util.concurrent.locks 包支持更复杂的锁定方式。我们不会详细的研究这个包，而是将重点放在它最基本的接口Lock上。 锁对象非常像 synchronized 代码使用的隐式锁。与隐式锁一样，一次只有一个线程拥有一个 Lock 对象。Loc</description>
    </item>
    
  </channel>
</rss>